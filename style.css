* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;

  -webkit-font-smoothing: antialiased; 
  -moz-osx-font-smoothing: grayscale;
}

:root {
  font-size: 62.5%;

  
  --color-base-white:    #ffffff; /* aqui estão sendo definidas variaveis para que eu utilize no processo*/
  --color-base-gray-100: #f5f5f5;
  --color-base-gray-300: #8d8d99;
  --color-base-gray-500: #3d3d3d;
  --color-base-gray-900: #202024;
}

html, body, input {
  font-family: 'Mulish', sans-serif;
}

body {
  font-size: 1.6rem;
  background-color: var(--color-base-white);
  color: var(--color-base-gray-900);
}

.app {
  display: grid;
  grid-template-rows: max-content 1fr max-content;/*(max-content quer dizer que que o conteudo vai se adaptar ao espaço que eu deixar automaticamente)*/
  height: 100vh;
}

.container {
  padding: 1.6rem 3.2rem;
  width: min(112rem, 100%);/*neste ponto ele esta defininto onde a tela para ed crescer e o conteudo se adaptar*/
  margin: 0 auto; /* neste ponto ele centraliza a tela colocando margens com tamanho automatico*/
}

main {
  overflow-y: scroll;/*estou definindo que haverá apenas scrool dentro do main no sentido Y, desta maneira consigo fixar o footer e o header*/
  background: var(--color-base-gray-100);
}

header,
nav, 
nav ul {
  display: flex;
  align-items: center;
  gap: 7.2rem;
  font-weight: 700;
}

header form {
  flex: 1;
}

nav ul {
  list-style: none;
  font-size: 1.8rem;
  color: var(--color-base-gray-300);
}

ul li.active {
  color: var(--color-base-gray-900);
}

.input-wrapper label{
  width: 1px; /* para melhor acessibilidade criamos um label, pois o placeholder nao é lido pelo navegador*/
  height: 1px; /* sendo assim é necessario criar um label e esconde-lo em baixo do placeholder, para o navegador */
  overflow: hidden; /* conseguir ler o campo */
  position: absolute;
}

.input-wrapper input {
  width: 100%;
  padding: 1.6rem;
  
  background-color: var(--color-base-gray-100);
  border: 0;
  border-radius: .6rem;
  
  font-weight: 600;
  font-size: 1.6rem;
  opacity: 0.56;
}

.input-wrapper input::placeholder {
  color: var(--color-base-gray-500);
}

.avatar {
  width: 4.2rem;
  height: 4.2rem;

  object-fit: cover;
  border-radius: 50%;
}

main h1 {
  padding-top: 1.6rem;
  font-size: 2.4rem;
}

.gallery {
  margin-top: 3.2rem;

  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 2.2rem;
}

.item {
  background-color: var(--color-base-white);
  border-radius: .8rem;
  overflow: hidden;
}

/*
.logo {
  filter: saturate(300%) brightness(2) hue-rotate(40deg) blur(2px);  filter é uma propriedade para customizar as imagens.
} 
*/

.item img {
  width: 100%;
  aspect-ratio: 16/9;
  object-fit: cover;
  /*filter: grayscale(); deixa foto cinza */
  transition-property: all;
  transition-duration: .3s;
  transition-delay: 0.1s;
  transition-timing-function: ease-in; /* transition são propriedades que dão dinamicas as imagens*/
  
  display: block;/* colocado para sumir com o espaço */
}

.item img:hover {
  filter: hue-rotate(7deg) contrast(101%) saturate(200%);
  transform: scale(1.1) rotate(-4deg) /* aumenta a escala da foto e desloca ela em graus  */
}

.details {
  padding: 2.2rem;
  background-color: var(--color-base-white);
  z-index: 1;
  position: relative;
 
}

.details h2 {
  font-size: 1.8rem;
}

.tags {
  margin-top: 1.2rem;
}

.tags span {
  padding: .6rem;
  background-color: var(--color-base-gray-100);
  border-radius: .4rem;

  line-height: 0;
  font-size: 1.2rem;
  text-transform: uppercase;
  
}

footer {
  text-align: center;
  padding: 1.6rem;
  font-weight: 600;
}

header {
  --startY: -100%;
  animation: move .5s;
}

footer {
  --startY: 100%;
  animation: move .5s;
}

@keyframes move {
  from {
    transform: translateY(var(--startY));
  }
}/* cria-se primeiramente a animação como se ela fosse uma função, e depois a chama no local desejado*/

.item {
  --delay: .4s;
  animation: appear .4s var(--delay) backwards;
}


@keyframes appear {
  0% {
    opacity: 0;
    transform: scale(0.7);
  }

  50% {
    transform: scale(1.2);
  }
}